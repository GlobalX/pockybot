#A kubernetes deploy of PockyBot

apiVersion: v1
kind: List
items:
# Define the Namespace so it is created if it doesnt exist
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: <<namespace_placeholder>>
# Define the Service (the way the containers are accessed)
  - apiVersion: v1
    kind: Service
    metadata:
      name: <<namespace_placeholder>>-service
      namespace: <<namespace_placeholder>>
      labels:
        name: <<namespace_placeholder>>-service
    spec:
      ports:
        - port: 9005
          targetPort: 80
      selector:
        app: <<portname_placeholder>>
# Define the Deployment (this creates the pod(s)) and exposes the ports, it also defines how many replicas will be running
  - apiVersion: apps/v1beta1
    kind: Deployment
    metadata:
      name: <<namespace_placeholder>>-deployment
      namespace: <<namespace_placeholder>>
    spec:
      replicas: 1
      template:
        metadata:
          name: <<namespace_placeholder>>
          labels:
            app: <<namespace_placeholder>>
        spec:
          imagePullSecrets:
            - name: <<image_secret_placeholder>>
          containers:
          - name: <<namespace_placeholder>>
            resources:
              requests:
                memory: "400Mi"
              limits:
                memory: "600Mi"
            imagePullPolicy: "Always"
            image: <<docker_image_url_base>><<image_placeholder>>:<<version_placeholder>>
            ports:
              - name: <<portname_placeholder>>
                containerPort: 80
            env:
              - name: WEBEX_ACCESS_TOKEN
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: spark-access-token
              - name: BOT_ID
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: bot-id
              - name: BOT_NAME
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: bot-name
              - name: POST_URL
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: post-url
              - name: PM_URL
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: pm-url
              - name: VERSION_BRANCH
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: version-branch
              - name: PGUSER
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: PGUSER
              - name: PGHOST
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: PGHOST
              - name: PGDATABASE
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: PGDATABASE
              - name: PGPORT
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: PGPORT
              - name: PGPASSWORD
                valueFrom:
                    secretKeyRef:
                        name: pocky-config
                        key: PGPASSWORD
              - name: GCLOUD_PROJECT_ID
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: GCLOUD_PROJECT_ID
              - name: GCLOUD_PRIVATE_KEY_ID
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: GCLOUD_PRIVATE_KEY_ID
              - name: GCLOUD_PRIVATE_KEY
                valueFrom:
                    secretKeyRef:
                        name: pocky-config
                        key: GCLOUD_PRIVATE_KEY
              - name: GCLOUD_CLIENT_EMAIL
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: GCLOUD_CLIENT_EMAIL
              - name: GCLOUD_CLIENT_ID
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: GCLOUD_CLIENT_ID
              - name: GCLOUD_CLIENT_CERT_URL
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: GCLOUD_CLIENT_CERT_URL
              - name: GCLOUD_BUCKET_NAME
                valueFrom:
                    configMapKeyRef:
                        name: pocky-config
                        key: GCLOUD_BUCKET_NAME
              - name: BUILD_NUMBER
                value: <<version_placeholder>>
            livenessProbe:
              httpGet:
                path: /
                port: 80
              initialDelaySeconds: 30
              timeoutSeconds: 30
# Define the ingress controller (bind a route to the service, in this case will hit our service on port 9005)
  - apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      name: <<namespace_placeholder>>-ingress
      namespace: <<namespace_placeholder>>
      annotations:
        kubernetes.io/ingress.class: "nginx"
        nginx.ingress.kubernetes.io/rewrite-target: /
        ingress.kubernetes.io/rewrite-target: /
    spec:
      tls:
      - hosts:
        - <<ingress_placeholder>>
        secretName: development-tls
      rules:
      - host: <<monitoring_placeholder>>
        http:
          paths:
          - path: /<<path_placeholder>>
            backend:
              serviceName: <<namespace_placeholder>>-service
              servicePort: 9005
      - host: <<kubernetes_placeholder>>
        http:
          paths:
          - path: /<<path_placeholder>>
            backend:
              serviceName: <<namespace_placeholder>>-service
              servicePort: 9005
